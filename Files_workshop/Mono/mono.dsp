declare filename "code.dsp"; declare name "code"; declare compilation_options    "-single -scal -I libraries/ -I project/ -lang wasm";
declare library_path "FaustDSP";
declare library_path "/libraries/stdfaust.lib";
declare library_path "/libraries/oscillators.lib";
declare library_path "/libraries/signals.lib";
declare library_path "/libraries/maths.lib";
declare library_path "/libraries/filters.lib";
declare filename "FaustDSP";
declare filters_lib_fir_author "Julius O. Smith III";
declare filters_lib_fir_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_fir_license "MIT-style STK-4.3 license";
declare filters_lib_iir_author "Julius O. Smith III";
declare filters_lib_iir_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_iir_license "MIT-style STK-4.3 license";
declare filters_lib_lowpass0_highpass1 "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass0_highpass1_author "Julius O. Smith III";
declare filters_lib_lowpass_author "Julius O. Smith III";
declare filters_lib_lowpass_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass_license "MIT-style STK-4.3 license";
declare filters_lib_name "Faust Filters Library";
declare filters_lib_tf1_author "Julius O. Smith III";
declare filters_lib_tf1_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf1_license "MIT-style STK-4.3 license";
declare filters_lib_tf1s_author "Julius O. Smith III";
declare filters_lib_tf1s_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf1s_license "MIT-style STK-4.3 license";
declare filters_lib_tf2_author "Julius O. Smith III";
declare filters_lib_tf2_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf2_license "MIT-style STK-4.3 license";
declare filters_lib_tf2s_author "Julius O. Smith III";
declare filters_lib_tf2s_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf2s_license "MIT-style STK-4.3 license";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.1";
declare name "FaustDSP";
declare oscillators_lib_name "Faust Oscillator Library";
declare oscillators_lib_version "0.0";
declare signals_lib_name "Faust Signal Routing Library";
declare signals_lib_version "0.0";
process = (((2,((_<:(_,1 : -<:_,_),_<:((_,0 : <),_,_ : select2),((_,0 : <),(_<:_,(_,(1,((192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float),(9.9999999999999995e-08f,(hslider("freq", 100.0f, 50.0f, 200.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *) : abs) : max : float) : /) : -) : * : _,1 : +) : +),_ : select2))~(_,(1.0f,((192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float),(9.9999999999999995e-08f,(hslider("freq", 100.0f, 50.0f, 200.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *) : abs) : max : float) : /) : /) : +) : !,_) : *),1 : -),(button("gate") : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),(hslider("gain", 0.10000000000000001f, 0.0f, 1.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : * : _<:(_,((1,(0,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(1,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *),(mem : _,((1,(0,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(1,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : *):>+~(_,(0,((1,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : -),(1,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : +) : /) : -) : *) : \(x1).(\(x2).(x2,x1 : -))~(_<:(_,((2,(1,((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -) : *),((1,(1.0000000000000004f,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +) : /) : *),(_,1 : @ : _,(((1,(1.0000000000000004f,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),((1,(1.0000000000000004f,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +) : /) : *):>_) : _<:(_,(((1,(0,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),(0,((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : *) : +),((1,(1.0000000000000004f,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +) : /) : *),(_,1 : @ : _,((2,(1,(0,((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : *) : -) : *),((1,(1.0000000000000004f,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +) : /) : *),(_,2 : @ : _,(((1,(0,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : -),(0,((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : *) : +),((1,(1.0000000000000004f,(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +),((1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /),(1,(((6.2831853071795862f,(hslider("cutoff", 10000.0f, 50.0f, 10000.0f, 0.01f) : _,0.0010000000000000009f : * : +~(_,0.999f : *)) : *),0.5f : *),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : /) : *) : +) : /) : *):>_<:_,_;
